{{- $icc := include "integratedcloudcomponent.service" . -}}
{{- $prov := include "prov.service" . -}}
{{- $ssc := include "ssc.service" . -}}
{{- $mqtt := include "mqtt.service" . -}}
{{- $ns := include "common.namespace" . -}}
{{- $file_store_path := include "filestore.dir.name" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "common.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: "{{ include "common.namespace" . }}-docker-registry-key"
      serviceAccountName: {{ include "common.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-services
          image: opsfleet/depends-on:latest
          args:
          - "-service={{ .Release.Name }}-opensync-mqtt-broker"
          - "-service={{ .Release.Name }}-wlan-prov-service"
          - "-service={{ .Release.Name }}-wlan-ssc-service"
          - -check_interval=5
      {{- if .Values.global.integratedDeployment }}
        - name: {{ include "common.name" . }}-readiness-int-cloud
          image: alpine
          imagePullPolicy: {{ .Values.pullPolicy | default .Values.global.pullPolicy }}
          command:
          - sh
          - -c
          - |
            apk add curl
            url=https://{{ $icc }}/ping
            counter=0
            status=$(curl --insecure --head --location --connect-timeout 5 --write-out %{http_code} --silent --output /dev/null ${url});
            while [ $counter -lt 10 ] && [ $status -ne 200 ]
            do
              echo ${url} service isnt ready. Tried $counter times
              sleep 5
              counter=`expr $counter + 1`
              status=$(curl --insecure --head --location --connect-timeout 5 --write-out %{http_code} --silent --output /dev/null ${url});
              echo Http Response code of ping request = $status
            done
            if [ $status -eq 200 ]
            then
              echo ${url} service is ready!
            else
              echo ${url} service failed to respond after 50 secs
              exit 1
            fi
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.global.testingEnabled }}
          image: {{ .Values.global.repository.registry  }}/{{ .Values.image.name }}:{{ .Values.image.tag }}-{{.Values.global.testingTimestamp}}
          {{- else }}
          image: {{ .Values.global.repository.registry  }}/{{ .Values.image.name }}:{{ .Values.image.tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.pullPolicy | default .Values.global.pullPolicy }}
          {{- if .Values.probes.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.port2 }}
            initialDelaySeconds: {{ .Values.probes.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.probes.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.probes.livenessProbe.successThreshold }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.port2 }}
            initialDelaySeconds: {{ .Values.probes.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readinessProbe.failureThreshold }}
            periodSeconds: {{ .Values.probes.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.probes.readinessProbe.successThreshold }}
          startupProbe:
            tcpSocket:
              port: {{ .Values.service.port1 }}
            failureThreshold: 500
            periodSeconds: 5
          {{- end }}
          env:
            {{- include "common.env" . | nindent 12 }}
            - name: OVSDB_MANAGER
              value: {{ .Values.externalhost.address.ovsdb }}
            - name: OVSDB_EXTERNAL_PORT
              value: "{{ .Values.externalhost.ports.ovsdb }}"
            - name: OVSDB_MANAGER_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MQTT_SERVER_INTERNAL
              value: {{ .Release.Name }}-{{ .Values.mqtt.url }}
            - name: MQTT_SERVER_EXTERNAL
              value: {{ .Values.externalhost.address.mqtt }}
            - name: MQTT_BROKER_EXTERNAL_PORT
              value: "{{ .Values.externalhost.ports.mqtt }}"
            {{- if .Values.global.integratedDeployment }}
            - name: INTEGRATED_SERVER
              value: {{ .Release.Name }}-{{ .Values.integratedcloudcomponent.url }}
            {{- else }}
            - name: PROV_SERVER
              value: {{ .Release.Name }}-{{ .Values.prov.url }}
            - name: SSC_SERVER
              value: {{ .Release.Name }}-{{ .Values.ssc.url }}
            {{- end }}
            - name: FILE_STORE_DIRECTORY_INTERNAL
              value: {{ $file_store_path }}
            - name: FILE_STORE_URL
              value: {{ .Values.filestore.url }}
            - name: DEFAULT_LAN_NAME
              value: {{ .Values.ethernetType.lanName }}
            - name: DEFAULT_LAN_TYPE
              value: {{ .Values.ethernetType.lanType }}
            - name: DEFAULT_WAN_TYPE
              value: {{ .Values.ethernetType.wanType }}
            - name: DEFAULT_WAN_NAME
              value: {{ .Values.ethernetType.wanName }}
            - name: tip_wlan_ovsdb_listener_threadPoolSize
              value: "{{ .Values.scalability.tip_wlan_ovsdb_listener_threadPoolSize }}"
            - name: tip_wlan_AsyncExecutor_CorePoolSize
              value: "{{ .Values.scalability.tip_wlan_AsyncExecutor_CorePoolSize }}"
            - name: tip_wlan_AsyncExecutor_MaxPoolSize
              value: "{{ .Values.scalability.tip_wlan_AsyncExecutor_MaxPoolSize }}"
            - name: tip_wlan_AsyncExecutor_QueueCapacity
              value: "{{ .Values.scalability.tip_wlan_AsyncExecutor_QueueCapacity }}"
            - name: tip_wlan_httpClientConfig_maxConnectionsTotal
              value: "{{ .Values.scalability.tip_wlan_httpClientConfig_maxConnectionsTotal }}"
            - name: tip_wlan_httpClientConfig_maxConnectionsPerRoute
              value: "{{ .Values.scalability.tip_wlan_httpClientConfig_maxConnectionsPerRoute }}"
            - name: tip_wlan_maxHttpThreads
              value: "{{ .Values.scalability.tip_wlan_maxHttpThreads }}"
            - name: JVM_MEM_OPTIONS
              value: "{{ .Values.scalability.JVM_MEM_OPTIONS }}"
          volumeMounts:
          - mountPath: /opt/tip-wlan/certs/client_keystore.jks
            name: certificates
            subPath: client_keystore.jks
          - mountPath: /opt/tip-wlan/certs/truststore.jks
            name: certificates
            subPath: truststore.jks
          - mountPath: /opt/tip-wlan/certs/server.pkcs12
            name: certificates
            subPath: server.pkcs12
          - mountPath: /opt/tip-wlan/certs/httpClientConfig.json
            name: certificates
            subPath: httpClientConfig.json
          - mountPath: /opt/tip-wlan/certs/ssl.properties
            name: certificates
            subPath: ssl.properties
          - mountPath: /app/opensync/logback.xml
            name: logback-config
            subPath: logback.xml
          - mountPath: {{ $file_store_path }}
            name: file-store-data
          ports:
            - name: {{ .Values.service.name1 }}
              containerPort: {{ .Values.service.port1 }}
              protocol: TCP
            - name: {{ .Values.service.name2 }}
              containerPort: {{ .Values.service.port2 }}
              protocol: TCP
            - name: {{ .Values.service.name3 }}
              containerPort: {{ .Values.service.port3 }}
              protocol: TCP
            - name: {{ .Values.service.name4 }}
              containerPort: {{ .Values.service.port4 }}
              protocol: TCP
            {{- if .Values.debug.enabled }}
            - name: {{ .Values.service.name5 }}
              containerPort: {{ .Values.service.port5 }}
              protocol: TCP
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}

      volumes:
      - name: certificates
        secret:
          secretName: tip-common-opensync-gw-certs
      - name: logback-config
        configMap:
            name: {{ include "common.fullname" . }}-log-config
      - name: file-store-data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "portal.sharedPvc.name" . }}
      {{- else }}
        emptyDir: {}
      {{- end }}
