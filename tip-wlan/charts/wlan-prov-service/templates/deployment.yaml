{{- $pg := include "postgresql.service" . -}}
{{- $ns := include "common.namespace" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  namespace: {{ include "common.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "common.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: "{{ include "common.namespace" . }}-docker-registry-key"
      serviceAccountName: {{ include "common.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-services
          image: opsfleet/depends-on@sha256:d0eadc2b77af663d28fb24586cf8e9023ab6ce204d0d7b725299fed2e4f876e1
          args:
          - "-service={{ .Release.Name }}-postgresql"
          - -check_interval=5
        - name: {{ include "common.name" . }}-create-db-schema
          env:
          - name: POSTGRESQL_PORT_NUMBER
            value: "5432"
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "common.fullname" . }}-creds
                key: postgresql-password
          - name: TIPUSER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "common.fullname" . }}-creds
                key: tipuser-password
          - name: SCHEMA_REPO_USER
            valueFrom:
              secretKeyRef:
                name: {{ include "common.fullname" . }}-creds
                key: schema-repo-user
          - name: SCHEMA_REPO_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "common.fullname" . }}-creds
                key: schema-repo-password
          image: postgres:latest
          imagePullPolicy: IfNotPresent
          command:
          - sh
          - -c
          - |      
            apt update
            apt -y install curl
            echo "***** Fetching latest cloud-sdk-schema-postgresql for DB and Tables sql from JFrog *****"
            curl --insecure -u$SCHEMA_REPO_USER:$SCHEMA_REPO_PASSWORD -O "https://tip-tip-wlan-cloud-docker-repo.jfrog.io/artifactory/tip-wlan-cloud-schemas/0.0.1-SNAPSHOT/sql/cloud-sdk-schema-postgresql-db-user.sql"
            curl --insecure -u$SCHEMA_REPO_USER:$SCHEMA_REPO_PASSWORD -O "https://tip-tip-wlan-cloud-docker-repo.jfrog.io/artifactory/tip-wlan-cloud-schemas/0.0.1-SNAPSHOT/sql/cloud-sdk-schema-postgresql-tables.sql"
            echo "***** Now executing cloud-sdk-schema-postgresql-db-user.sql on host {{ $pg }} and creating db prov_db and user tip_user using User Postgres. This uses full client-cert authentication *****"
            ### Observed that PSQL was unable to resolve the Postgres-service host because the postgres service wasnt 
            ### really ready when running Postgres in Master-Slave config... hence the below retry-logic
            psql 'host={{ $pg }} port=5432 user=postgres sslmode=verify-ca sslcert=/opt/tip-wlan/certs/postgresclientcert.pem sslkey=/opt/tip-wlan/certs/postgresclientkey_dec.pem sslrootcert=/opt/tip-wlan/certs/cacert.pem' -f cloud-sdk-schema-postgresql-db-user.sql
            status=$(echo $?)
            echo psql response of the request = $status
            counter=0
            while [ $counter -lt 3 ] && [ $status -ne 0 ]
            do
              echo {{ $pg }} service isnt ready. Tried $counter times
              sleep 2
              counter=`expr $counter + 1`
              psql 'host={{ $pg }} port=5432 user=postgres sslmode=verify-ca sslcert=/opt/tip-wlan/certs/postgresclientcert.pem sslkey=/opt/tip-wlan/certs/postgresclientkey_dec.pem sslrootcert=/opt/tip-wlan/certs/cacert.pem' -f cloud-sdk-schema-postgresql-db-user.sql
              status=$(echo $?)
              echo psql response of the request = $status
            done
            if [ $status -eq 0 ]
            then
              echo "Prov_db, role created, continuing with other schema"
            else
              echo {{ $pg }} service failed to respond after 3 retries
              exit 1
            fi
            echo "***** Now executing cloud-sdk-schema-postgresql-tables.sql and creating/updating tables inside prov_db using user tip_user. This user would use md5 authentication with client certs *****"
            PGPASSWORD=$TIPUSER_PASSWORD psql 'host={{ $pg }} port=5432 dbname=prov_db user=tip_user sslmode=verify-ca sslcert=/opt/tip-wlan/certs/postgresclientcert.pem sslkey=/opt/tip-wlan/certs/postgresclientkey_dec.pem sslrootcert=/opt/tip-wlan/certs/cacert.pem' -f cloud-sdk-schema-postgresql-tables.sql
            echo "***** SCHEMA Created/Updated in Postgres *****"
            exit
          ports:
          - containerPort: 5432
            name: tcp-postgresql
            protocol: TCP
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /dev/shm
            name: dshm
          - mountPath: /bitnami/postgresql
            name: data
          - mountPath: /opt/tip-wlan/certs/cacert.pem
            name: certificates
            subPath: cacert.pem
          - mountPath: /opt/tip-wlan/certs/postgresclientcert.pem
            name: certificates
            subPath: postgresclientcert.pem
          - mountPath: /opt/tip-wlan/certs/postgresclientkey_dec.pem
            name: certificates
            subPath: postgresclientkey_dec.pem
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.global.testingEnabled }}
          image: {{ .Values.global.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}-{{.Values.global.testingTimestamp}}
          {{- else }}
          image: {{ .Values.global.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          env:
            {{- include "common.env" . | nindent 12 }}
          {{- if .Values.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.service.port2 }}
              scheme: {{ .Values.probes.livenessProbe.scheme }}
            initialDelaySeconds: {{ .Values.probes.livenessProbe.initialDelaySeconds }}  
            timeoutSeconds: {{ .Values.probes.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.probes.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.probes.livenessProbe.successThreshold }}
          readinessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.service.port2 }}
              scheme: {{ .Values.probes.readinessProbe.scheme }}
            initialDelaySeconds: {{ .Values.probes.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readinessProbe.failureThreshold }}
            periodSeconds: {{ .Values.probes.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.probes.readinessProbe.successThreshold }}
          {{- end }}
          volumeMounts:
          - mountPath: /opt/tip-wlan/certs/client_keystore.jks
            name: certificates
            subPath: client_keystore.jks
          - mountPath: /opt/tip-wlan/certs/truststore.jks
            name: certificates
            subPath: truststore.jks
          - mountPath: /opt/tip-wlan/certs/server.pkcs12
            name: certificates
            subPath: server.pkcs12
          - mountPath: /opt/tip-wlan/certs/cacert.pem
            name: certificates
            subPath: cacert.pem
          - mountPath: /opt/tip-wlan/certs/postgresclientcert.pem
            name: certificates
            subPath: postgresclientcert.pem
          - mountPath: /opt/tip-wlan/certs/postgresclient.p12
            name: certificates
            subPath: postgresclient.p12
          - mountPath: /app/prov/logback.xml
            name: logback-config
            subPath: logback.xml
          - mountPath: /app/prov/datasource.properties
            name: logback-config
            subPath: datasource.properties
          ports:
            - name: {{ .Values.service.name1 }}
              containerPort: {{ .Values.service.port1 }}
              protocol: TCP
            - name: {{ .Values.service.name2 }}
              containerPort: {{ .Values.service.port2 }}
              protocol: TCP
            {{- if .Values.debug.enabled }}
            - name: {{ .Values.service.name3 }}
              containerPort: {{ .Values.service.port3 }}
              protocol: TCP
            {{- end }}              
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
      - name: certificates
        secret:
          secretName: {{ include "common.fullname" . }}-certs
          defaultMode: 0400
      - name: logback-config
        configMap:
            name: {{ include "common.fullname" . }}-log-config
      - name: data
        emptyDir: {}
      - name: dshm
        emptyDir: {}